----------------------------------------
Global fields:
    'freq_meta': array<dict<str, str>> 
    'freq_index_dict': dict<str, int32> 
    'faf_meta': array<dict<str, str>> 
    'faf_index_dict': dict<str, int32> 
    'freq_sample_count': array<int32> 
    'filtering_model': struct {
        model_name: str, 
        score_name: str, 
        feature_medians: dict<tuple (
            str
        ), struct {
            a_index: int32, 
            n_alt_alleles: int32, 
            AS_pab_max: float64, 
            AS_MQRankSum: float64, 
            AS_SOR: float64, 
            AS_ReadPosRankSum: float64
        }>, 
        variants_by_strata: dict<tuple (
            str
        ), int64>, 
        features_importance: dict<str, float64>, 
        features: array<str>, 
        test_results: array<struct {
            rf_prediction: str, 
            rf_label: str, 
            n: int32
        }>, 
        rf_snv_cutoff: struct {
            bin: float64, 
            min_score: float64
        }, 
        rf_indel_cutoff: struct {
            bin: float64, 
            min_score: float64
        }, 
        inbreeding_cutoff: float64, 
        model_id: str
    } 
    'tool_versions': struct {
        dbsnp_version: str, 
        cadd_version: str, 
        revel_version: str, 
        splicaai_version: str, 
        primateai_version: str, 
        pangolin_version: str, 
        vrs_version: str
    } 
    'vep_globals': struct {
        vep_version: str, 
        vep_csq_header: str, 
        vep_help: str, 
        vep_config: str
    } 
    'age_distribution': struct {
        bin_edges: array<float64>, 
        bin_freq: array<int32>, 
        n_smaller: int32, 
        n_larger: int32
    } 
    'age_index_dict': dict<str, int32> 
    'age_meta': array<dict<str, str>> 
    'grpmax_index_dict': dict<str, int32> 
    'grpmax_meta': array<dict<str, str>> 
    'README': dict<str, str> 
    'gnomad_qc_repo': str 
    'gnomad_methods_repo': str 
    'mane_transcripts_version': str 
----------------------------------------
Row fields:
    'locus': locus<GRCh38> 
    'alleles': array<str> 
    'grpmax': array<struct {
        AC: int32, 
        AF: float64, 
        AN: int32, 
        homozygote_count: int32, 
        grp: str, 
        faf95: float64
    }> 
    'rsids': set<str> 
    'rf': struct {
        rf_positive_label: bool, 
        rf_negative_label: bool, 
        rf_label: str, 
        rf_train: bool, 
        rf_tp_probability: float64
    } 
    'in_silico_predictors': struct {
        cadd: struct {
            phred: float32, 
            raw_score: float32, 
            has_duplicate: bool
        }, 
        revel: struct {
            revel_score: float64, 
            has_duplicate: bool
        }, 
        splice_ai: struct {
            splice_ai_score: float32, 
            splice_consequence: str, 
            has_duplicate: bool
        }, 
        pangolin: struct {
            pangolin_score: float64
        }
    } 
    'variant_id': str 
    'colocated_variants': struct {
        all: array<str>, 
        non_ukb: array<str>
    } 
    'gnomad': struct {
        freq: struct {
            all: struct {
                ac: int32, 
                ac_raw: int32, 
                an: int32, 
                hemizygote_count: int32, 
                homozygote_count: int32, 
                populations: array<struct {
                    id: str, 
                    ac: int32, 
                    an: int32, 
                    hemizygote_count: int32, 
                    homozygote_count: int32
                }>
            }, 
            non_ukb: struct {
                ac: int32, 
                ac_raw: int32, 
                an: int32, 
                hemizygote_count: int32, 
                homozygote_count: int32, 
                populations: array<struct {
                    id: str, 
                    ac: int32, 
                    an: int32, 
                    hemizygote_count: int32, 
                    homozygote_count: int32
                }>
            }
        }, 
        faf95: struct {
            popmax: float64, 
            popmax_population: str
        }, 
        faf99: struct {
            popmax: float64, 
            popmax_population: str
        }, 
        age_distribution: struct {
            het: array<struct {
                bin_edges: array<float64>, 
                bin_freq: array<int64>, 
                n_smaller: int64, 
                n_larger: int64
            }>, 
            hom: array<struct {
                bin_edges: array<float64>, 
                bin_freq: array<int64>, 
                n_smaller: int64, 
                n_larger: int64
            }>
        }, 
        filters: set<str>, 
        quality_metrics: struct {
            allele_balance: struct {
                alt_adj: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }, 
                alt_raw: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }
            }, 
            genotype_depth: struct {
                all_adj: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }, 
                all_raw: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }, 
                alt_adj: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }, 
                alt_raw: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }
            }, 
            genotype_quality: struct {
                all_adj: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }, 
                all_raw: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }, 
                alt_adj: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }, 
                alt_raw: struct {
                    bin_edges: array<float64>, 
                    bin_freq: array<int64>, 
                    n_smaller: int64, 
                    n_larger: int64
                }
            }, 
            site_quality_metrics: array<struct {
                metric: str, 
                value: float64
            }>
        }
    } 
    'subsets': set<str> 
    'flags': set<str> 
    'coverage': struct {
        exome: struct {
            mean: float64, 
            median: int32, 
            over_1: float32, 
            over_5: float32, 
            over_10: float32, 
            over_15: float32, 
            over_20: float32, 
            over_25: float32, 
            over_30: float32, 
            over_50: float32, 
            over_100: float32
        }, 
        genome: struct {
            mean: float64, 
            median: int32, 
            over_1: float32, 
            over_5: float32, 
            over_10: float32, 
            over_15: float32, 
            over_20: float32, 
            over_25: float32, 
            over_30: float32, 
            over_50: float32, 
            over_100: float32
        }
    } 
    'transcript_consequences': array<struct {
        biotype: str, 
        consequence_terms: array<str>, 
        domains: set<str>, 
        gene_id: str, 
        gene_symbol: str, 
        hgvsc: str, 
        hgvsp: str, 
        is_canonical: bool, 
        lof_filter: str, 
        lof_flags: str, 
        lof: str, 
        major_consequence: str, 
        polyphen_prediction: str, 
        sift_prediction: str, 
        transcript_id: str, 
        transcript_version: str, 
        gene_version: str, 
        is_mane_select: bool, 
        is_mane_select_version: bool, 
        refseq_id: str, 
        refseq_version: str
    }> 
----------------------------------------
Key: ['locus', 'alleles']
----------------------------------------