# Enums
enum DatasetId {
  exac
  gnomad_r2_1
  gnomad_r2_1_controls
  gnomad_r2_1_non_cancer
  gnomad_r2_1_non_neuro
  gnomad_r2_1_non_topmed
  gnomad_r3
  gnomad_r3_controls_and_biobanks
  gnomad_r3_non_cancer
  gnomad_r3_non_neuro
  gnomad_r3_non_topmed
  gnomad_r3_non_v2
  gnomad_sv_r2_1
  gnomad_sv_r2_1_controls
  gnomad_sv_r2_1_non_neuro
  gnomad_sv_r4
  gnomad_cnv_r4
  gnomad_r4
  gnomad_r4_non_ukb
}

enum ReferenceGenomeId {
  GRCh37
  GRCh38
}

enum VepConsequence {
  transcript_ablation
  splice_acceptor_variant
  splice_donor_variant
  stop_gained
  frameshift_variant
  stop_lost
  start_lost
  transcript_amplification
  inframe_insertion
  inframe_deletion
  missense_variant
  protein_altering_variant
  splice_region_variant
  incomplete_terminal_codon_variant
  stop_retained_variant
  synonymous_variant
  coding_sequence_variant
  mature_miRNA_variant
  five_prime_UTR_variant
  three_prime_UTR_variant
  non_coding_transcript_exon_variant
  intron_variant
  NMD_transcript_variant
  non_coding_transcript_variant
  upstream_gene_variant
  downstream_gene_variant
  TFBS_ablation
  TFBS_amplification
  TF_binding_site_variant
  regulatory_region_ablation
  regulatory_region_amplification
  feature_elongation
  regulatory_region_variant
  feature_truncation
  intergenic_variant
}

# Basic Types
type Histogram {
  bin_edges: [Float!]!
  bin_freq: [Float!]!
  n_smaller: Int
  n_larger: Int
}

type AgeDistribution {
  het: Histogram
  hom: Histogram
}

type AlleleBalanceHistogram {
  alt: Histogram
}

type GenotypeDepthHistogram {
  all: Histogram
  alt: Histogram
}

type GenotypeQualityHistogram {
  all: Histogram
  alt: Histogram
}

# Population Types
type PopulationAlleleFrequencies {
  id: String!
  ac: Int!
  an: Int!
  ac_hemi: Int
  ac_hom: Int!
  hemizygote_count: Int
  homozygote_count: Int!
}

type LocalAncestryPopulations {
  id: String!
  ac: Int!
  an: Int!
}

# Coverage Types
type CoverageBin {
  pos: Float!
  mean: Float
}

type Coverage {
  exome: [CoverageBin!]
  genome: [CoverageBin!]
}

type VariantCoverage {
  mean: Float
  median: Float
  over_1: Float
  over_5: Float
  over_10: Float
  over_15: Float
  over_20: Float
  over_25: Float
  over_30: Float
  over_50: Float
  over_100: Float
}

type VariantCoverageDetails {
  exome: VariantCoverage
  genome: VariantCoverage
}

# Quality Metrics
type VariantSiteQualityMetric {
  metric: String!
  value: Float
}

type VariantQualityMetrics {
  allele_balance: AlleleBalanceHistogram
  genotype_depth: GenotypeDepthHistogram
  genotype_quality: GenotypeQualityHistogram
  site_quality_metrics: [VariantSiteQualityMetric!]!
}

# Filtering Allele Frequency
type VariantFilteringAlleleFrequency {
  popmax: Float
  popmax_population: String
}

# FAF Max
type Fafmax {
  faf95_max: Float
  faf95_max_gen_anc: String
  faf99_max: Float
  faf99_max_gen_anc: String
}

# Variant Subset Types
type VariantDetailsExomeData {
  ac: Int!
  an: Int!
  ac_hemi: Int!
  ac_hom: Int!
  hemizygote_count: Int
  homozygote_count: Int
  af: Float
  faf95: VariantFilteringAlleleFrequency
  faf99: VariantFilteringAlleleFrequency
  fafmax: Fafmax
  filters: [String!]!
  populations: [PopulationAlleleFrequencies!]!
  local_ancestry_populations: [LocalAncestryPopulations!]
  age_distribution: AgeDistribution
  quality_metrics: VariantQualityMetrics
  flags: [String!]
}

type VariantDetailsGenomeData {
  ac: Int!
  an: Int!
  ac_hemi: Int!
  ac_hom: Int!
  hemizygote_count: Int
  homozygote_count: Int
  af: Float
  faf95: VariantFilteringAlleleFrequency
  faf99: VariantFilteringAlleleFrequency
  fafmax: Fafmax
  filters: [String!]!
  populations: [PopulationAlleleFrequencies!]!
  local_ancestry_populations: [LocalAncestryPopulations!]
  age_distribution: AgeDistribution
  quality_metrics: VariantQualityMetrics
  flags: [String!]
}

# Joint Frequency Comparison Stats
type ContingencyTableTest {
  p_value: Float
  odds_ratio: String
}

type CochranMantelHaenszelTest {
  chisq: Float
  p_value: Float
}

type StatUnion {
  p_value: Float
  stat_test_name: String
  gen_ancs: [String!]
}

type VariantJointFrequencyComparisonStats {
  contingency_table_test: [ContingencyTableTest!]
  cochran_mantel_haenszel_test: CochranMantelHaenszelTest
  stat_union: StatUnion
}

type VariantDetailsJointData {
  ac: Int!
  an: Int!
  filters: [String!]!
  hemizygote_count: Int
  homozygote_count: Int
  populations: [PopulationAlleleFrequencies!]!
  faf95: VariantFilteringAlleleFrequency
  faf99: VariantFilteringAlleleFrequency
  fafmax: Fafmax
  age_distribution: AgeDistribution
  quality_metrics: VariantQualityMetrics
  freq_comparison_stats: VariantJointFrequencyComparisonStats
}

# Transcript Consequence
type TranscriptConsequence {
  biotype: String
  consequence_terms: [String!]
  domains: [String!]
  gene_id: String!
  gene_version: String
  gene_symbol: String
  hgvs: String
  hgvsc: String
  hgvsp: String
  is_canonical: Boolean
  is_mane_select: Boolean
  is_mane_select_version: Boolean
  lof: String
  lof_filter: String
  lof_flags: String
  major_consequence: String
  polyphen_prediction: String
  refseq_id: String
  refseq_version: String
  sift_prediction: String
  transcript_id: String!
  transcript_version: String
  canonical: Boolean
}

# LoF Curation
type VariantLofCuration {
  gene_id: String!
  gene_version: String!
  gene_symbol: String
  verdict: String!
  flags: [String!]
  project: String!
}

# Multi-nucleotide Variant
type MultiNucleotideVariant {
  combined_variant_id: String!
  changes_amino_acids: Boolean!
  n_individuals: Int!
  other_constituent_snvs: [String!]!
}

# In Silico Predictors
type VariantInSilicoPredictor {
  id: String!
  value: String!
  flags: [String!]!
}

# Non-coding Constraint
type NonCodingConstraintRegion {
  chrom: String!
  start: Int!
  stop: Int!
  element_id: String!
  possible: Float!
  observed: Float!
  expected: Float!
  oe: Float!
  z: Float!
}

# VRS Types
type VANumber {
  value: Float!
}

type VADefiniteRange {
  min: Float!
  max: Float!
}

type VAIndefiniteRange {
  comparator: String!
  value: Float!
}

union VANumberlike = VANumber | VADefiniteRange | VAIndefiniteRange

type VASequenceInterval {
  start: VANumberlike!
  end: VANumberlike!
}

type VACytobandInterval {
  start: String!
  end: String!
}

type VASequenceLocation {
  id: String!
  sequence_id: String!
  interval: VASequenceInterval!
}

type VALiteralSequenceExpression {
  sequence: String!
}

type VAAllele {
  id: String!
  location: VASequenceLocation!
  state: VALiteralSequenceExpression!
}

type VAGrpMaxFAF95 {
  frequency: Float!
  gen_anc: String!
}

type VAAncillaryResults {
  grpMaxFAF95: VAGrpMaxFAF95
  homozygotes: Int
  hemizygotes: Int
}

type VAQualityMeasures {
  meanDepth: Float
  fractionCoverage20x: Float
}

type VACohortCharacteristic {
  id: String!
  label: String!
  characteristics: String
}

type VACohort {
  id: String!
  label: String!
  characteristics: [VACohortCharacteristic!]
}

type VACohortAlleleFrequencyDerivation {
  id: String!
  type: String!
  label: String!
  description: String!
  cohort: VACohort!
}

type VACohortAlleleFrequencyData {
  id: String!
  label: String!
  alleleCount: Int!
  alleleNumber: Int!
  alleleFrequency: Float!
  ancillaryResults: VAAncillaryResults
  qualityMeasures: VAQualityMeasures
  subcohortFrequency: [VACohortAlleleFrequencyData!]
  derivedFrom: VACohortAlleleFrequencyDerivation
}

type VACohortAlleleFrequency {
  id: String!
  altAllele: VAAllele!
  refAllele: VAAllele!
  cohortAlleleFrequency: [VACohortAlleleFrequencyData!]!
  ancillaryResults: VAAncillaryResults
}

# Local Ancestry Grouped Data
type LocalAncestryPopulationGroupedData {
  genome: [LocalAncestryPopulations!]
  exome: [LocalAncestryPopulations!]
  joint: [LocalAncestryPopulations!]
}

# Main Variant Type
type VariantDetails {
  variant_id: String!
  reference_genome: ReferenceGenomeId!
  chrom: String!
  pos: Int!
  ref: String!
  alt: String!
  caid: String
  colocated_variants: [String!]
  coverage: VariantCoverageDetails!
  exome: VariantDetailsExomeData
  genome: VariantDetailsGenomeData
  joint: VariantDetailsJointData
  flags: [String!]
  lof_curations: [VariantLofCuration!]
  multi_nucleotide_variants: [MultiNucleotideVariant!]
  rsids: [String!]
  transcript_consequences: [TranscriptConsequence!]
  in_silico_predictors: [VariantInSilicoPredictor!]
  local_ancestry_populations: LocalAncestryPopulationGroupedData
  non_coding_constraint: NonCodingConstraintRegion
  
  # VRS fields
  va: VACohortAlleleFrequency!
  vrs: VAAllele
  
  # Deprecated fields for compatibility
  rsid: String
}

# Gene Types
type Exon {
  feature_type: String!
  start: Int!
  stop: Int!
}

type GeneTranscript {
  reference_genome: ReferenceGenomeId!
  transcript_id: String!
  transcript_version: String!
  chrom: String!
  start: Int!
  stop: Int!
  exons: [Exon!]!
  strand: String!
  gtex_tissue_expression: [GtexTissue!]
}

type ManeSelectTranscript {
  ensembl_id: String!
  ensembl_version: String!
  refseq_id: String!
  refseq_version: String!
}

# Constraint Types
type GnomadConstraint {
  exp_lof: Float
  exp_mis: Float!
  exp_syn: Float
  
  obs_lof: Int
  obs_mis: Int
  obs_syn: Int
  
  oe_lof: Float
  oe_lof_lower: Float
  oe_lof_upper: Float
  
  oe_mis: Float!
  oe_mis_lower: Float
  oe_mis_upper: Float
  
  oe_syn: Float
  oe_syn_lower: Float
  oe_syn_upper: Float
  
  lof_z: Float
  mis_z: Float!
  syn_z: Float!
  
  pli: Float
  flags: [String!]
  
  # Deprecated fields
  pLI: Float
}

type ExacConstraint {
  exp_syn: Float
  exp_mis: Float
  exp_lof: Float
  
  obs_syn: Int
  obs_mis: Int
  obs_lof: Int
  
  mu_syn: Float
  mu_mis: Float
  mu_lof: Float
  
  syn_z: Float!
  mis_z: Float!
  lof_z: Float
  
  pli: Float
  
  # Deprecated fields
  pLI: Float!
}

type ProteinMitochondrialGeneConstraint {
  exp_lof: Float!
  exp_mis: Float!
  exp_syn: Float!
  
  obs_lof: Float!
  obs_mis: Float!
  obs_syn: Float!
  
  oe_lof: Float!
  oe_lof_lower: Float!
  oe_lof_upper: Float!
  
  oe_mis: Float!
  oe_mis_lower: Float!
  oe_mis_upper: Float!
  
  oe_syn: Float!
  oe_syn_lower: Float!
  oe_syn_upper: Float!
}

type RNAMitochondrialGeneConstraint {
  observed: Float!
  expected: Float!
  oe: Float!
  oe_upper: Float!
  oe_lower: Float!
}

union MitochondrialGeneConstraint = ProteinMitochondrialGeneConstraint | RNAMitochondrialGeneConstraint

type MitochondrialRegionConstraint {
  start: Int!
  stop: Int!
  oe: Float!
  oe_upper: Float!
  oe_lower: Float!
}

type GnomadV2RegionalMissenseConstraint {
  has_no_rmc_evidence: Boolean
  passed_qc: Boolean
  regions: [GnomadV2RegionalMissenseConstraintRegion]
}

type GnomadV2RegionalMissenseConstraintRegion {
  chrom: String
  start: Int
  stop: Int
  aa_start: String
  aa_stop: String
  obs_mis: Int
  exp_mis: Float
  obs_exp: Float
  chisq_diff_null: Float
  p_value: Float
}

type ExacRegionalMissenseConstraintRegion {
  start: Int!
  stop: Int!
  obs_mis: Int
  exp_mis: Float
  obs_exp: Float
  chisq_diff_null: Float
}

# Pext Types
type Pext {
  regions: [PextRegion!]!
  flags: [String!]!
}

type PextRegion {
  start: Int!
  stop: Int!
  mean: Float!
  tissues: [PextRegionTissue!]!
}

type PextRegionTissue {
  tissue: String
  value: Float
}

# GTEx Types (placeholder for now)
type GtexTissue {
  tissue: String!
  value: Float!
}

# Variant Cooccurrence Types
type HeterozygousVariantCooccurrenceCountsData {
  in_cis: Int!
  in_trans: Int!
  unphased: Int!
  two_het_total: Int!
}

type HomozygousVariantCooccurrenceCountsData {
  hom_total: Int!
}

type HeterozygousVariantCooccurrenceCounts {
  csq: String!
  af_cutoff: String!
  data: HeterozygousVariantCooccurrenceCountsData!
}

type HomozygousVariantCooccurrenceCounts {
  csq: String!
  af_cutoff: String!
  data: HomozygousVariantCooccurrenceCountsData!
}

# Other dataset IDs for nested resolvers
enum StructuralVariantDatasetId {
  gnomad_sv_r2_1
  gnomad_sv_r4
}

enum CopyNumberVariantDatasetId {
  gnomad_cnv_r4
}

# Region Types
type Region {
  reference_genome: ReferenceGenomeId!
  chrom: String!
  start: Int!
  stop: Int!

  genes: [RegionGene!]!
  non_coding_constraints: [NonCodingConstraintRegion!]

  variants(dataset: DatasetId!): [Variant!]!
  structural_variants(dataset: StructuralVariantDatasetId!): [StructuralVariant!]!
  mitochondrial_variants(dataset: DatasetId!): [MitochondrialVariant!]!
  copy_number_variants(dataset: CopyNumberVariantDatasetId!): [CopyNumberVariant!]!

  clinvar_variants: [ClinVarVariant!]

  coverage(dataset: DatasetId!): RegionCoverage!
  mitochondrial_coverage(dataset: DatasetId!): [MitochondrialCoverageBin!]

  short_tandem_repeats(dataset: DatasetId!): [ShortTandemRepeat!]!
}

type RegionGene {
  gene_id: String!
  symbol: String!
  start: Int!
  stop: Int!
  exons: [Exon!]!
  transcripts: [RegionGeneTranscript!]!
}

type RegionGeneTranscript {
  transcript_id: String!
  start: Int!
  stop: Int!
  exons: [Exon!]!
}

type RegionCoverage {
  exome: [CoverageBin!]!
  genome: [CoverageBin!]!
}

# Placeholder types for nested resolvers (to be implemented later)
type Variant {
  variant_id: String!
}

type StructuralVariant {
  variant_id: String!
}

type MitochondrialVariant {
  variant_id: String!
}

type ClinVarVariant {
  variant_id: String!
}

type FeatureCoverage {
  region: String!
}

type MitochondrialCoverageBin {
  pos: Int!
  mean: Float!
}

type CNVTrackCallableCoverageBin {
  xpos: Float!
  percent_callable: Float
}

type ShortTandemRepeat {
  id: String!
}

type CopyNumberVariantPopulation {
  id: String!
  sc: Float!
  sn: Float!
  sf: Float!
}

type CopyNumberVariant {
  sc: Float!
  sn: Float!
  sf: Float!
  reference_genome: ReferenceGenomeId!
  chrom: String!
  end: Int!
  filters: [String!]
  length: Int
  pos: Int!
  type: String
  posmin: Int
  posmax: Int
  endmin: Int
  endmax: Int
  variant_id: String!
}

type CopyNumberVariantDetails {
  alts: [String!]
  sc: Float!
  sn: Float!
  sf: Float!
  chrom: String!
  end: Int!
  filters: [String!]
  genes: [String!]
  length: Int
  populations: [CopyNumberVariantPopulation!]
  pos: Int!
  qual: Float
  reference_genome: ReferenceGenomeId!
  type: String
  posmin: Int
  posmax: Int
  endmin: Int
  endmax: Int
  variant_id: String!
}

# Gene Type
type Gene {
  reference_genome: ReferenceGenomeId!
  gene_id: String!
  gene_version: String!
  symbol: String!
  gencode_symbol: String!
  hgnc_id: String
  ncbi_id: String
  omim_id: String
  name: String
  chrom: String!
  start: Int!
  stop: Int!
  strand: String!
  exons: [Exon!]!
  transcripts: [GeneTranscript!]!
  canonical_transcript_id: String
  mane_select_transcript: ManeSelectTranscript

  flags: [String!]!

  pext: Pext

  gnomad_constraint: GnomadConstraint
  gnomad_v2_regional_missense_constraint: GnomadV2RegionalMissenseConstraint

  exac_constraint: ExacConstraint
  exac_regional_missense_constraint_regions: [ExacRegionalMissenseConstraintRegion!]

  mitochondrial_constraint: MitochondrialGeneConstraint
  mitochondrial_missense_constraint_regions: [MitochondrialRegionConstraint]

  variants(dataset: DatasetId!): [Variant!]!
  structural_variants(dataset: StructuralVariantDatasetId!): [StructuralVariant!]!
  mitochondrial_variants(dataset: DatasetId!): [MitochondrialVariant!]!

  clinvar_variants: [ClinVarVariant!]

  coverage(dataset: DatasetId): FeatureCoverage!
  mitochondrial_coverage(dataset: DatasetId!): [MitochondrialCoverageBin!]
  cnv_track_callable_coverage(dataset: CopyNumberVariantDatasetId!): [CNVTrackCallableCoverageBin!]

  short_tandem_repeats(dataset: DatasetId!): [ShortTandemRepeat!]!
  heterozygous_variant_cooccurrence_counts: [HeterozygousVariantCooccurrenceCounts!]!
  homozygous_variant_cooccurrence_counts: [HomozygousVariantCooccurrenceCounts!]!
  copy_number_variants(dataset: CopyNumberVariantDatasetId!): [CopyNumberVariant!]!
}

type GeneSearchResult {
  ensembl_id: String!
  ensembl_version: String!
  symbol: String
}

type VariantSearchResult {
  variant_id: String!
}

# Variant Cooccurrence Types
type VariantCooccurrenceInPopulation {
  id: String!
  genotype_counts: [Int!]!
  haplotype_counts: [Float!]!
  p_compound_heterozygous: Float
}

type VariantCooccurrence {
  variant_ids: [String!]!
  genotype_counts: [Int!]!
  haplotype_counts: [Float!]!
  p_compound_heterozygous: Float
  populations: [VariantCooccurrenceInPopulation!]!
}

# Query
type Query {
  variant(
    variantId: String
    rsid: String
    vrsId: String
    dataset: DatasetId!
  ): VariantDetails
  
  gene(
    gene_id: String
    gene_symbol: String
    reference_genome: ReferenceGenomeId!
  ): Gene
  
  region(
    chrom: String!
    start: Int!
    stop: Int!
    reference_genome: ReferenceGenomeId!
  ): Region!
  
  gene_search(
    query: String!
    reference_genome: ReferenceGenomeId!
  ): [GeneSearchResult!]!
  
  variant_search(
    query: String!
    dataset: DatasetId!
  ): [VariantSearchResult!]!
  
  variant_cooccurrence(
    variants: [String!]!
    dataset: DatasetId!
  ): VariantCooccurrence
  
  copy_number_variant(
    variantId: String!
    dataset: CopyNumberVariantDatasetId!
  ): CopyNumberVariantDetails
}