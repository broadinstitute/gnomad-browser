package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"gnomad-browser/gnomad-go-api/internal/data/queries"
	"gnomad-browser/gnomad-go-api/internal/elastic"
	"gnomad-browser/gnomad-go-api/internal/graph/model"
	"strings"
)

// Pli is the resolver for the pli field.
func (r *exacConstraintResolver) Pli(ctx context.Context, obj *model.ExacConstraint) (*float64, error) {
	return obj.Pli, nil
}

// PLi is the resolver for the pLI field.
func (r *exacConstraintResolver) PLi(ctx context.Context, obj *model.ExacConstraint) (float64, error) {
	// This is a deprecated field - return pli value or 0
	if obj.Pli != nil {
		return *obj.Pli, nil
	}
	return 0, nil
}

// Pli is the resolver for the pli field.
func (r *gnomadConstraintResolver) Pli(ctx context.Context, obj *model.GnomadConstraint) (*float64, error) {
	return obj.Pli, nil
}

// PLi is the resolver for the pLI field.
func (r *gnomadConstraintResolver) PLi(ctx context.Context, obj *model.GnomadConstraint) (*float64, error) {
	// This is a deprecated field - return the same as pli
	return obj.Pli, nil
}

// Variant is the resolver for the variant field.
func (r *queryResolver) Variant(ctx context.Context, variantID *string, rsid *string, vrsID *string, dataset model.DatasetID) (*model.VariantDetails, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Validate that exactly one ID is provided
	idCount := 0
	if variantID != nil {
		idCount++
	}
	if rsid != nil {
		idCount++
	}
	if vrsID != nil {
		idCount++
	}

	if idCount != 1 {
		return nil, fmt.Errorf("exactly one of variantId, rsid, or vrsId must be provided")
	}

	// Dispatch to appropriate fetcher
	datasetStr := string(dataset)

	if variantID != nil {
		normalizedID := queries.NormalizeVariantID(*variantID)
		return queries.FetchVariantByID(ctx, esClient, datasetStr, normalizedID)
	}

	if rsid != nil {
		normalizedRSID := strings.ToLower(*rsid)
		return queries.FetchVariantByRSID(ctx, esClient, datasetStr, normalizedRSID)
	}

	if vrsID != nil {
		return queries.FetchVariantByVRSID(ctx, esClient, datasetStr, *vrsID)
	}

	return nil, fmt.Errorf("no variant ID provided")
}

// Gene is the resolver for the gene field.
func (r *queryResolver) Gene(ctx context.Context, geneID *string, geneSymbol *string, referenceGenome model.ReferenceGenomeID) (*model.Gene, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Check that at least one identifier is provided
	if geneID == nil && geneSymbol == nil {
		return nil, fmt.Errorf("one of 'gene_id' or 'gene_symbol' is required")
	}

	// Convert reference genome ID to string
	refGenomeStr := string(referenceGenome)

	// Fetch by gene ID if provided
	if geneID != nil {
		gene, err := queries.FetchGeneByID(ctx, esClient, *geneID, refGenomeStr)
		if err != nil {
			return nil, err
		}
		if gene == nil {
			return nil, fmt.Errorf("gene not found")
		}
		return gene, nil
	}

	// Otherwise, fetch by gene symbol
	gene, err := queries.FetchGeneBySymbol(ctx, esClient, *geneSymbol, refGenomeStr)
	if err != nil {
		return nil, err
	}
	if gene == nil {
		return nil, fmt.Errorf("gene not found")
	}
	return gene, nil
}

// Region is the resolver for the region field.
func (r *queryResolver) Region(ctx context.Context, chrom string, start int, stop int, referenceGenome model.ReferenceGenomeID) (*model.Region, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome ID to string
	refGenomeStr := string(referenceGenome)

	// Fetch the region
	region, err := queries.FetchRegion(ctx, esClient, chrom, start, stop, refGenomeStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching region: %w", err)
	}

	return region, nil
}

// GeneSearch is the resolver for the gene_search field.
func (r *queryResolver) GeneSearch(ctx context.Context, query string, referenceGenome model.ReferenceGenomeID) ([]*model.GeneSearchResult, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome ID to string
	refGenomeStr := string(referenceGenome)

	// Fetch genes matching the query
	results, err := queries.FetchGenesMatchingText(ctx, esClient, query, refGenomeStr)
	if err != nil {
		return nil, err
	}

	return results, nil
}

// VariantSearch is the resolver for the variant_search field.
func (r *queryResolver) VariantSearch(ctx context.Context, query string, dataset model.DatasetID) ([]*model.VariantSearchResult, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert dataset ID to string
	datasetStr := string(dataset)

	// Fetch matching variants
	results, err := queries.FetchMatchingVariants(ctx, esClient, query, datasetStr)
	if err != nil {
		return nil, err
	}

	return results, nil
}

// Genes is the resolver for the genes field.
func (r *regionResolver) Genes(ctx context.Context, obj *model.Region) ([]*model.RegionGene, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome to string
	refGenomeStr := string(obj.ReferenceGenome)

	// Fetch genes in the region
	genes, err := queries.FetchGenesInRegion(ctx, esClient, obj.Chrom, obj.Start, obj.Stop, refGenomeStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching genes in region: %w", err)
	}

	return genes, nil
}

// NonCodingConstraints is the resolver for the non_coding_constraints field.
func (r *regionResolver) NonCodingConstraints(ctx context.Context, obj *model.Region) ([]*model.NonCodingConstraintRegion, error) {
	// TODO: Implement non-coding constraints fetching
	return []*model.NonCodingConstraintRegion{}, nil
}

// Variants is the resolver for the variants field.
func (r *regionResolver) Variants(ctx context.Context, obj *model.Region, dataset model.DatasetID) ([]*model.Variant, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert dataset to string
	datasetStr := string(dataset)

	// Fetch variants in the region
	variants, err := queries.FetchVariantsInRegion(ctx, esClient, obj.Chrom, obj.Start, obj.Stop, datasetStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching variants in region: %w", err)
	}

	return variants, nil
}

// StructuralVariants is the resolver for the structural_variants field.
func (r *regionResolver) StructuralVariants(ctx context.Context, obj *model.Region, dataset model.StructuralVariantDatasetID) ([]*model.StructuralVariant, error) {
	// TODO: Implement structural variants fetching
	return []*model.StructuralVariant{}, nil
}

// MitochondrialVariants is the resolver for the mitochondrial_variants field.
func (r *regionResolver) MitochondrialVariants(ctx context.Context, obj *model.Region, dataset model.DatasetID) ([]*model.MitochondrialVariant, error) {
	// TODO: Implement mitochondrial variants fetching
	return []*model.MitochondrialVariant{}, nil
}

// CopyNumberVariants is the resolver for the copy_number_variants field.
func (r *regionResolver) CopyNumberVariants(ctx context.Context, obj *model.Region, dataset model.CopyNumberVariantDatasetID) ([]*model.CopyNumberVariant, error) {
	// TODO: Implement copy number variants fetching
	return []*model.CopyNumberVariant{}, nil
}

// ClinvarVariants is the resolver for the clinvar_variants field.
func (r *regionResolver) ClinvarVariants(ctx context.Context, obj *model.Region) ([]*model.ClinVarVariant, error) {
	// TODO: Implement ClinVar variants fetching
	return []*model.ClinVarVariant{}, nil
}

// Coverage is the resolver for the coverage field.
func (r *regionResolver) Coverage(ctx context.Context, obj *model.Region, dataset model.DatasetID) (*model.RegionCoverage, error) {
	// TODO: Implement coverage fetching
	return &model.RegionCoverage{
		Exome:  []*model.CoverageBin{},
		Genome: []*model.CoverageBin{},
	}, nil
}

// MitochondrialCoverage is the resolver for the mitochondrial_coverage field.
func (r *regionResolver) MitochondrialCoverage(ctx context.Context, obj *model.Region, dataset model.DatasetID) ([]*model.MitochondrialCoverageBin, error) {
	// TODO: Implement mitochondrial coverage fetching
	return []*model.MitochondrialCoverageBin{}, nil
}

// ShortTandemRepeats is the resolver for the short_tandem_repeats field.
func (r *regionResolver) ShortTandemRepeats(ctx context.Context, obj *model.Region, dataset model.DatasetID) ([]*model.ShortTandemRepeat, error) {
	// TODO: Implement short tandem repeats fetching
	return []*model.ShortTandemRepeat{}, nil
}

// ExacConstraint returns ExacConstraintResolver implementation.
func (r *Resolver) ExacConstraint() ExacConstraintResolver { return &exacConstraintResolver{r} }

// GnomadConstraint returns GnomadConstraintResolver implementation.
func (r *Resolver) GnomadConstraint() GnomadConstraintResolver { return &gnomadConstraintResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Region returns RegionResolver implementation.
func (r *Resolver) Region() RegionResolver { return &regionResolver{r} }

type exacConstraintResolver struct{ *Resolver }
type gnomadConstraintResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type regionResolver struct{ *Resolver }
