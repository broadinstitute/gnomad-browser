package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"gnomad-browser/gnomad-go-api/internal/data/queries"
	"gnomad-browser/gnomad-go-api/internal/elastic"
	"gnomad-browser/gnomad-go-api/internal/graph/model"
	"strings"
)

// Pli is the resolver for the pli field.
func (r *exacConstraintResolver) Pli(ctx context.Context, obj *model.ExacConstraint) (*float64, error) {
	return obj.Pli, nil
}

// PLi is the resolver for the pLI field.
func (r *exacConstraintResolver) PLi(ctx context.Context, obj *model.ExacConstraint) (float64, error) {
	// This is a deprecated field - return pli value or 0
	if obj.Pli != nil {
		return *obj.Pli, nil
	}
	return 0, nil
}

// ClinvarVariants is the resolver for the clinvar_variants field.
func (r *geneResolver) ClinvarVariants(ctx context.Context, obj *model.Gene) ([]*model.ClinVarVariant, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome enum to string
	var refGenomeStr string
	switch obj.ReferenceGenome {
	case model.ReferenceGenomeIDGRCh37:
		refGenomeStr = "GRCh37"
	case model.ReferenceGenomeIDGRCh38:
		refGenomeStr = "GRCh38"
	default:
		return nil, fmt.Errorf("unsupported reference genome: %v", obj.ReferenceGenome)
	}

	// Fetch ClinVar variants for gene
	return queries.FetchClinVarVariantsByGene(ctx, esClient, obj.GeneID, refGenomeStr)
}

// ShortTandemRepeats is the resolver for the short_tandem_repeats field.
func (r *geneResolver) ShortTandemRepeats(ctx context.Context, obj *model.Gene, dataset model.DatasetID) ([]*model.ShortTandemRepeat, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert dataset ID to string
	datasetStr := string(dataset)

	// Fetch STRs for this gene using the ensembl gene ID
	strs, err := queries.FetchShortTandemRepeatsByGene(ctx, esClient, obj.GeneID, datasetStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching short tandem repeats for gene %s: %w", obj.GeneID, err)
	}

	return strs, nil
}

// Pli is the resolver for the pli field.
func (r *gnomadConstraintResolver) Pli(ctx context.Context, obj *model.GnomadConstraint) (*float64, error) {
	return obj.Pli, nil
}

// PLi is the resolver for the pLI field.
func (r *gnomadConstraintResolver) PLi(ctx context.Context, obj *model.GnomadConstraint) (*float64, error) {
	// This is a deprecated field - return the same as pli
	return obj.Pli, nil
}

// Variant is the resolver for the variant field.
func (r *queryResolver) Variant(ctx context.Context, variantID *string, rsid *string, vrsID *string, dataset model.DatasetID) (*model.VariantDetails, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Validate that exactly one ID is provided
	idCount := 0
	if variantID != nil {
		idCount++
	}
	if rsid != nil {
		idCount++
	}
	if vrsID != nil {
		idCount++
	}

	if idCount != 1 {
		return nil, fmt.Errorf("exactly one of variantId, rsid, or vrsId must be provided")
	}

	// Dispatch to appropriate fetcher
	datasetStr := string(dataset)

	if variantID != nil {
		normalizedID := queries.NormalizeVariantID(*variantID)
		return queries.FetchVariantByID(ctx, esClient, datasetStr, normalizedID)
	}

	if rsid != nil {
		normalizedRSID := strings.ToLower(*rsid)
		return queries.FetchVariantByRSID(ctx, esClient, datasetStr, normalizedRSID)
	}

	if vrsID != nil {
		return queries.FetchVariantByVRSID(ctx, esClient, datasetStr, *vrsID)
	}

	return nil, fmt.Errorf("no variant ID provided")
}

// StructuralVariant is the resolver for the structural_variant field.
func (r *queryResolver) StructuralVariant(ctx context.Context, variantID string, dataset model.StructuralVariantDatasetID) (*model.StructuralVariantDetails, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Fetch the structural variant
	variant, err := queries.FetchStructuralVariant(ctx, esClient, variantID, dataset)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch structural variant: %w", err)
	}

	if variant == nil {
		return nil, fmt.Errorf("structural variant not found: %s", variantID)
	}

	return variant, nil
}

// Gene is the resolver for the gene field.
func (r *queryResolver) Gene(ctx context.Context, geneID *string, geneSymbol *string, referenceGenome model.ReferenceGenomeID) (*model.Gene, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Check that at least one identifier is provided
	if geneID == nil && geneSymbol == nil {
		return nil, fmt.Errorf("one of 'gene_id' or 'gene_symbol' is required")
	}

	// Convert reference genome ID to string
	refGenomeStr := string(referenceGenome)

	// Fetch by gene ID if provided
	if geneID != nil {
		gene, err := queries.FetchGeneByID(ctx, esClient, *geneID, refGenomeStr)
		if err != nil {
			return nil, err
		}
		if gene == nil {
			return nil, fmt.Errorf("gene not found")
		}
		return gene, nil
	}

	// Otherwise, fetch by gene symbol
	gene, err := queries.FetchGeneBySymbol(ctx, esClient, *geneSymbol, refGenomeStr)
	if err != nil {
		return nil, err
	}
	if gene == nil {
		return nil, fmt.Errorf("gene not found")
	}
	return gene, nil
}

// Transcript is the resolver for the transcript field.
func (r *queryResolver) Transcript(ctx context.Context, transcriptID string, referenceGenome model.ReferenceGenomeID) (*model.Transcript, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome ID to string
	refGenomeStr := string(referenceGenome)

	// Fetch the transcript
	transcript, err := queries.FetchTranscript(ctx, esClient, transcriptID, refGenomeStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching transcript: %w", err)
	}

	if transcript == nil {
		return nil, fmt.Errorf("transcript not found")
	}

	return transcript, nil
}

// Region is the resolver for the region field.
func (r *queryResolver) Region(ctx context.Context, chrom string, start int, stop int, referenceGenome model.ReferenceGenomeID) (*model.Region, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome ID to string
	refGenomeStr := string(referenceGenome)

	// Fetch the region
	region, err := queries.FetchRegion(ctx, esClient, chrom, start, stop, refGenomeStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching region: %w", err)
	}

	return region, nil
}

// GeneSearch is the resolver for the gene_search field.
func (r *queryResolver) GeneSearch(ctx context.Context, query string, referenceGenome model.ReferenceGenomeID) ([]*model.GeneSearchResult, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome ID to string
	refGenomeStr := string(referenceGenome)

	// Fetch genes matching the query
	results, err := queries.FetchGenesMatchingText(ctx, esClient, query, refGenomeStr)
	if err != nil {
		return nil, err
	}

	return results, nil
}

// VariantSearch is the resolver for the variant_search field.
func (r *queryResolver) VariantSearch(ctx context.Context, query string, dataset model.DatasetID) ([]*model.VariantSearchResult, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert dataset ID to string
	datasetStr := string(dataset)

	// Fetch matching variants
	results, err := queries.FetchMatchingVariants(ctx, esClient, query, datasetStr)
	if err != nil {
		return nil, err
	}

	return results, nil
}

// VariantCooccurrence is the resolver for the variant_cooccurrence field.
func (r *queryResolver) VariantCooccurrence(ctx context.Context, variants []string, dataset model.DatasetID) (*model.VariantCooccurrence, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Call the variant co-occurrence query function
	return queries.FetchVariantCooccurrence(ctx, esClient, variants, string(dataset))
}

// Liftover is the resolver for the liftover field.
func (r *queryResolver) Liftover(ctx context.Context, sourceVariantID *string, liftoverVariantID *string, referenceGenome model.ReferenceGenomeID) ([]*model.LiftoverResult, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome enum to string
	var refGenomeStr string
	switch referenceGenome {
	case model.ReferenceGenomeIDGRCh37:
		refGenomeStr = "GRCh37"
	case model.ReferenceGenomeIDGRCh38:
		refGenomeStr = "GRCh38"
	default:
		return nil, fmt.Errorf("unsupported reference genome: %v", referenceGenome)
	}

	// Fetch liftover data
	return queries.FetchLiftover(ctx, esClient, sourceVariantID, liftoverVariantID, refGenomeStr)
}

// CopyNumberVariant is the resolver for the copy_number_variant field.
func (r *queryResolver) CopyNumberVariant(ctx context.Context, variantID string, dataset model.CopyNumberVariantDatasetID) (*model.CopyNumberVariantDetails, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert dataset ID to string
	datasetStr := string(dataset)

	// Fetch CNV details
	cnvDetails, err := queries.FetchCopyNumberVariant(ctx, esClient, variantID, datasetStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching copy number variant: %w", err)
	}

	if cnvDetails == nil {
		return nil, fmt.Errorf("copy number variant not found")
	}

	return cnvDetails, nil
}

// ClinvarVariant is the resolver for the clinvar_variant field.
func (r *queryResolver) ClinvarVariant(ctx context.Context, variantID string, referenceGenome model.ReferenceGenomeID) (*model.ClinVarVariantDetails, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome enum to string
	var refGenomeStr string
	switch referenceGenome {
	case model.ReferenceGenomeIDGRCh37:
		refGenomeStr = "GRCh37"
	case model.ReferenceGenomeIDGRCh38:
		refGenomeStr = "GRCh38"
	default:
		return nil, fmt.Errorf("unsupported reference genome: %v", referenceGenome)
	}

	// Fetch ClinVar variant
	return queries.FetchClinVarVariant(ctx, esClient, variantID, refGenomeStr)
}

// ShortTandemRepeat is the resolver for the short_tandem_repeat field.
func (r *queryResolver) ShortTandemRepeat(ctx context.Context, id string, dataset model.DatasetID) (*model.ShortTandemRepeatDetails, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert dataset ID to string
	datasetStr := string(dataset)

	// Fetch STR details
	strDetails, err := queries.FetchShortTandemRepeat(ctx, esClient, id, datasetStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching short tandem repeat: %w", err)
	}

	return strDetails, nil
}

// ShortTandemRepeats is the resolver for the short_tandem_repeats field.
func (r *queryResolver) ShortTandemRepeats(ctx context.Context, dataset model.DatasetID) ([]*model.ShortTandemRepeat, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert dataset ID to string
	datasetStr := string(dataset)

	// Fetch all STRs
	strs, err := queries.FetchShortTandemRepeats(ctx, esClient, datasetStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching short tandem repeats: %w", err)
	}

	return strs, nil
}
// ClinvarVariants is the resolver for the clinvar_variants field.
func (r *regionResolver) ClinvarVariants(ctx context.Context, obj *model.Region) ([]*model.ClinVarVariant, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert reference genome enum to string
	var refGenomeStr string
	switch obj.ReferenceGenome {
	case model.ReferenceGenomeIDGRCh37:
		refGenomeStr = "GRCh37"
	case model.ReferenceGenomeIDGRCh38:
		refGenomeStr = "GRCh38"
	default:
		return nil, fmt.Errorf("unsupported reference genome: %v", obj.ReferenceGenome)
	}

	// Fetch ClinVar variants for region
	return queries.FetchClinVarVariantsByRegion(ctx, esClient, obj.Chrom, obj.Start, obj.Stop, refGenomeStr)
}

// ShortTandemRepeats is the resolver for the short_tandem_repeats field.
func (r *regionResolver) ShortTandemRepeats(ctx context.Context, obj *model.Region, dataset model.DatasetID) ([]*model.ShortTandemRepeat, error) {
	// Get Elasticsearch client from context
	esClient := elastic.FromContext(ctx)
	if esClient == nil {
		return nil, fmt.Errorf("elasticsearch client not found in context")
	}

	// Convert dataset ID to string
	datasetStr := string(dataset)

	// Fetch STRs within this genomic region
	strs, err := queries.FetchShortTandemRepeatsByRegion(ctx, esClient, obj.Chrom, obj.Start, obj.Stop, datasetStr)
	if err != nil {
		return nil, fmt.Errorf("error fetching short tandem repeats for region %s:%d-%d: %w", obj.Chrom, obj.Start, obj.Stop, err)
	}

	return strs, nil
}
// ExacConstraint returns ExacConstraintResolver implementation.
func (r *Resolver) ExacConstraint() ExacConstraintResolver { return &exacConstraintResolver{r} }

// Gene returns GeneResolver implementation.
func (r *Resolver) Gene() GeneResolver { return &geneResolver{r} }

// GnomadConstraint returns GnomadConstraintResolver implementation.
func (r *Resolver) GnomadConstraint() GnomadConstraintResolver { return &gnomadConstraintResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Region returns RegionResolver implementation.
func (r *Resolver) Region() RegionResolver { return &regionResolver{r} }

type exacConstraintResolver struct{ *Resolver }
type geneResolver struct{ *Resolver }
type gnomadConstraintResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type regionResolver struct{ *Resolver }
